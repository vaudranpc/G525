{"ast":null,"code":"import Papa from 'papaparse';\nconst CSV_DATA_FILES = [\"compteurs\", \"fontaines\"];\nexport const getDataCompteur = async () => {\n  const resulat = Promise.all(CSV_DATA_FILES.map(fichier => new Promise((resolve, reject) => {\n    var fichierCsv = require(`../data/${fichier}.csv`);\n\n    Papa.parse(fichierCsv, {\n      header: false,\n      comments: true,\n      download: true,\n      complete: resolve,\n      error: reject\n    });\n  }))).then(resulat => {\n    const result = {};\n    CSV_DATA_FILES.forEach((fichier, index) => result[fichier] = resulat[index].data.splice(1, resulat[index].data.length - 2));\n    return result;\n  });\n  return resulat;\n};","map":{"version":3,"sources":["/Users/pascalanhe/Documents/GitHub/G525/src/methods/csvParser.js"],"names":["Papa","CSV_DATA_FILES","getDataCompteur","resulat","Promise","all","map","fichier","resolve","reject","fichierCsv","require","parse","header","comments","download","complete","error","then","result","forEach","index","data","splice","length"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,MAAMC,cAAc,GAAG,CAAC,WAAD,EAAc,WAAd,CAAvB;AACA,OAAO,MAAMC,eAAe,GAAG,YAAY;AAEvC,QAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CACZJ,cAAc,CAACK,GAAf,CACKC,OAAD,IAAa,IAAIH,OAAJ,CAAY,CAACI,OAAD,EAAUC,MAAV,KAAqB;AAC1C,QAAIC,UAAU,GAAGC,OAAO,CAAE,WAAUJ,OAAQ,MAApB,CAAxB;;AACAP,IAAAA,IAAI,CAACY,KAAL,CAAWF,UAAX,EAAuB;AACnBG,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,QAAQ,EAAE,IAFS;AAGnBC,MAAAA,QAAQ,EAAE,IAHS;AAInBC,MAAAA,QAAQ,EAAER,OAJS;AAKnBS,MAAAA,KAAK,EAAER;AALY,KAAvB;AAQH,GAVY,CADjB,CADY,EAcdS,IAdc,CAcRf,OAAD,IAAa;AAChB,UAAMgB,MAAM,GAAG,EAAf;AACAlB,IAAAA,cAAc,CAACmB,OAAf,CACI,CAACb,OAAD,EAAUc,KAAV,KACKF,MAAM,CAACZ,OAAD,CAAN,GAAkBJ,OAAO,CAACkB,KAAD,CAAP,CAAeC,IAAf,CAAoBC,MAApB,CAA2B,CAA3B,EAA8BpB,OAAO,CAACkB,KAAD,CAAP,CAAeC,IAAf,CAAoBE,MAApB,GAA6B,CAA3D,CAF3B;AAIA,WAAOL,MAAP;AAEH,GAtBe,CAAhB;AAuBA,SAAOhB,OAAP;AACH,CA1BM","sourcesContent":["import Papa from 'papaparse';\n\nconst CSV_DATA_FILES = [\"compteurs\", \"fontaines\"];\nexport const getDataCompteur = async () => {\n\n    const resulat = Promise.all(\n        CSV_DATA_FILES.map(\n            (fichier) => new Promise((resolve, reject) => {\n                var fichierCsv = require(`../data/${fichier}.csv`);\n                Papa.parse(fichierCsv, {\n                    header: false,\n                    comments: true,\n                    download: true,\n                    complete: resolve,\n                    error: reject\n\n                });\n            })\n        )\n    ).then((resulat) => {\n        const result = {};\n        CSV_DATA_FILES.forEach(\n            (fichier, index) =>\n                (result[fichier] = resulat[index].data.splice(1, resulat[index].data.length - 2))\n        );\n        return result;\n\n    });\n    return resulat;\n}"]},"metadata":{},"sourceType":"module"}