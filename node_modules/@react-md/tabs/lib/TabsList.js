"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabsList = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable jsx-a11y/interactive-supports-focus */
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var useTabIndicatorStyle_1 = require("./useTabIndicatorStyle");
var useTabsMovement_1 = require("./useTabsMovement");
var block = (0, utils_1.bem)("rmd-tabs");
/**
 * The `TabsList` component is the container for all the individual `Tab`s that
 * should be rendered. This handles adding an active indicator underneath the
 * active tab and animating it to the new location when a new tab becomes
 * active. It also handles the ability update which tab is selected when it has
 * been clicked or updated with keyboard movement.
 *
 * This should probably not be used outside of this package unless a custom
 * implementation is desired.
 */
exports.TabsList = (0, react_1.forwardRef)(function TabsList(_a, forwardedRef) {
    var _b;
    var style = _a.style, className = _a.className, onClick = _a.onClick, onKeyDown = _a.onKeyDown, children = _a.children, activeIndex = _a.activeIndex, _c = _a.align, align = _c === void 0 ? "left" : _c, _d = _a.automatic, automatic = _d === void 0 ? false : _d, _e = _a.padded, padded = _e === void 0 ? false : _e, _f = _a.orientation, orientation = _f === void 0 ? "horizontal" : _f, onActiveIndexChange = _a.onActiveIndexChange, _g = _a.disableTransition, disableTransition = _g === void 0 ? false : _g, props = __rest(_a, ["style", "className", "onClick", "onKeyDown", "children", "activeIndex", "align", "automatic", "padded", "orientation", "onActiveIndexChange", "disableTransition"]);
    var horizontal = orientation === "horizontal";
    var _h = (0, useTabsMovement_1.useTabsMovement)({
        onClick: onClick,
        onKeyDown: onKeyDown,
        children: children,
        horizontal: horizontal,
        activeIndex: activeIndex,
        onActiveIndexChange: onActiveIndexChange,
        automatic: automatic,
    }), tabs = _h.tabs, itemRefs = _h.itemRefs, handleClick = _h.handleClick, handleKeyDown = _h.handleKeyDown;
    var _j = __read((0, useTabIndicatorStyle_1.useTabIndicatorStyle)({
        style: style,
        ref: forwardedRef,
        align: align,
        itemRefs: itemRefs,
        totalTabs: tabs.length,
        activeIndex: activeIndex,
    }), 4), mergedStyle = _j[0], tabsRefHandler = _j[1], tabsRef = _j[2], updateIndicatorStyles = _j[3];
    var isKeyboard = (0, utils_1.useIsUserInteractionMode)("keyboard");
    var prevActiveIndex = (0, react_1.useRef)(activeIndex);
    (0, react_1.useEffect)(function () {
        var tabs = tabsRef.current;
        var tabRef = itemRefs[activeIndex] && itemRefs[activeIndex].current;
        var incrementing = prevActiveIndex.current < activeIndex;
        prevActiveIndex.current = activeIndex;
        if (!tabs || !tabRef) {
            return;
        }
        var currentX = tabs.scrollLeft + tabs.offsetWidth;
        var tabLeft = tabRef.offsetLeft;
        var tabWidth = tabRef.offsetWidth;
        if (incrementing && currentX < tabLeft + tabWidth) {
            tabs.scrollLeft = tabLeft - tabWidth;
        }
        else if (!incrementing && tabs.scrollLeft > tabLeft) {
            tabs.scrollLeft = tabLeft;
        }
        // don't want this to trigger on itemRefs or tabsRef changes since those
        // have a chance of updating each render.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    return ((0, jsx_runtime_1.jsx)(useTabIndicatorStyle_1.UpdateIndicatorStylesProvider, __assign({ value: updateIndicatorStyles }, { children: (0, jsx_runtime_1.jsx)("div", __assign({}, props, { "aria-orientation": orientation, style: mergedStyle, role: "tablist", className: (0, classnames_1.default)(block((_b = {},
                _b[align] = true,
                _b.padded = padded,
                _b.vertical = !horizontal,
                _b.animate = !disableTransition && (!automatic || !isKeyboard),
                _b)), className), ref: tabsRefHandler, onClick: handleClick, onKeyDown: handleKeyDown }, { children: react_1.Children.map(tabs, function (child, i) {
                if (!(0, react_1.isValidElement)(child)) {
                    return child;
                }
                var tab = react_1.Children.only(child);
                var ref = itemRefs[i];
                if (tab.props.ref) {
                    ref = function (instance) {
                        itemRefs[i].current = instance;
                        (0, utils_1.applyRef)(instance, tab.props.ref);
                    };
                }
                return (0, react_1.cloneElement)(tab, { ref: ref });
            }) }), void 0) }), void 0));
});
//# sourceMappingURL=TabsList.js.map