var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { Children, isValidElement, useCallback, useEffect, useMemo, useState, } from "react";
import { MovementPresets, useKeyboardMovement, } from "@react-md/utils";
/**
 * @internal
 */
export function useTabsMovement(_a) {
    var onClick = _a.onClick, onKeyDown = _a.onKeyDown, children = _a.children, automatic = _a.automatic, horizontal = _a.horizontal, activeIndex = _a.activeIndex, onActiveIndexChange = _a.onActiveIndexChange;
    // first filter out all "nulled" or falsish elements since it's possible to do:
    // {!thing && <Tab />}
    var tabs = useMemo(function () { return Children.toArray(children).filter(Boolean); }, [children]);
    // now filter out any other invalid elements (text nodes for some reason) and
    // disabled tabs since they shouldn't be keyboard focusable
    var visibleTabs = useMemo(function () {
        return tabs.filter(function (child) { return isValidElement(child) && !child.props.disabled; });
    }, [tabs]);
    var _b = __read(useState(activeIndex), 2), focusedIndex = _b[0], setFocusedIndex = _b[1];
    useEffect(function () {
        setFocusedIndex(activeIndex);
    }, [activeIndex]);
    var _c = __read(useKeyboardMovement(__assign(__assign({}, (horizontal
        ? MovementPresets.HORIZONTAL_TABS
        : MovementPresets.VERTICAL_TABS)), { onKeyDown: onKeyDown, focusedIndex: focusedIndex, items: visibleTabs, onChange: function (_a) {
            var index = _a.index;
            if (index === -1) {
                return;
            }
            if (automatic) {
                onActiveIndexChange(index);
            }
            var item = itemRefs[index] && itemRefs[index].current;
            if (item) {
                item.focus();
            }
            setFocusedIndex(index);
        } })), 2), itemRefs = _c[0], handleKeyDown = _c[1];
    var handleClick = useCallback(function (event) {
        if (onClick) {
            onClick(event);
        }
        var target = event.target && event.target.closest("button");
        if (!target) {
            return;
        }
        var index = itemRefs.findIndex(function (ref) { return ref.current === target; });
        if (activeIndex !== index) {
            onActiveIndexChange(index);
        }
    }, [activeIndex, itemRefs, onActiveIndexChange, onClick]);
    return {
        tabs: tabs,
        itemRefs: itemRefs,
        handleClick: handleClick,
        handleKeyDown: handleKeyDown,
    };
}
//# sourceMappingURL=useTabsMovement.js.map